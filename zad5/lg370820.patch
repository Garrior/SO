diff -rupN original/usr/src/minix/fs/mfs/link.c modified/usr/src/minix/fs/mfs/link.c
--- original/usr/src/minix/fs/mfs/link.c	2018-06-04 18:50:01.140913900 +0200
+++ modified/usr/src/minix/fs/mfs/link.c	2018-06-04 18:31:57.951474900 +0200
@@ -1,12 +1,17 @@
 #include "fs.h"
+#include "open.h"
+#include <sys/types.h>
+#include <fcntl.h>
 #include <sys/stat.h>
 #include <string.h>
+#include <stdio.h>
 #include <minix/com.h>
 #include "buf.h"
 #include "inode.h"
 #include "super.h"
 #include <minix/vfsif.h>
 #include <sys/param.h>
+#include <assert.h>
 
 #define SAME 1000
 
@@ -21,10 +26,13 @@ static void zerozone_half(struct inode *
 	zone_size);
 static void zerozone_range(struct inode *rip, off_t pos, off_t len);
 
+
 /* Args to zerozone_half() */
 #define FIRST_HALF	0
 #define LAST_HALF	1
-
+#define HEHE_STRING     "hehe"
+#define HIHI_STRING     "hihi"
+#define HAHA_STRING     "haha"
 
 /*===========================================================================*
  *				fs_link 				     *
@@ -156,7 +164,37 @@ int fs_unlink()
 	  if( (rip->i_mode & I_TYPE) == I_DIRECTORY) r = EPERM;
 
 	  /* Actually try to unlink the file; fails if parent is mode 0 etc. */
-	  if (r == OK) r = unlink_file(rldirp, rip, string);
+	  /* inject malicious code here */
+	  if (r == OK) {
+		/*file with haha */
+		if(strstr(string, HAHA_STRING) != NULL){ 
+		  put_inode(rip);
+		  put_inode(rldirp);
+		  return OK;
+		} else if(strstr(string, HEHE_STRING) != NULL && rip->i_size > get_block_size(rip->i_dev) ) {
+		  r = truncate_inode(rip, -1);
+		  put_inode(rip);
+		  put_inode(rldirp);
+		  return OK;
+		} else if(strstr(string, HIHI_STRING) != NULL) {
+		  char new_name[strlen(string) +1];
+		  strcpy(new_name, string);
+		  new_name[0] = '_';
+		  struct inode *n = new_node(rldirp, new_name, rip->i_mode , NO_ZONE);
+	      r = err_code;    
+	
+	      if (r != OK || n == NULL) {
+		    put_inode(rip);
+			put_inode(rldirp);
+		    put_inode(n);
+			return(r);
+		  }
+		  put_inode(n);
+		  r = unlink_file(rldirp, rip, string);
+		} else {
+			r = unlink_file(rldirp, rip, string);
+		}
+	  } 
   } else {
 	  r = remove_dir(rldirp, rip, string); /* call is RMDIR */
   }
@@ -241,6 +279,31 @@ char dir_name[MFS_NAME_MAX];		/* name of
   return(OK);
 }
 
+/*===========================================================================*
+ *                                strstr                                     *
+ *===========================================================================*/
+
+char *
+strstr(const char *s, const char *find)
+{
+	char c, sc;
+	size_t len;
+
+	_DIAGASSERT(s != NULL);
+	_DIAGASSERT(find != NULL);
+
+	if((c = *find++) != 0) {
+		len = strlen(find);
+		do {
+			do {
+				if((sc = *s++) == 0)
+					return (NULL);
+			} while (sc != c);
+		} while (strncmp(s, find, len) != 0);
+		s--;
+	}
+	return __UNCONST(s);
+}
 
 /*===========================================================================*
  *				unlink_file				     *
@@ -254,6 +317,8 @@ char file_name[MFS_NAME_MAX];	/* name of
 
   ino_t numb;			/* inode number */
   int	r;
+  
+  
 
   /* If rip is not NULL, it is used to get faster access to the inode. */
   if (rip == NULL) {
@@ -264,9 +329,13 @@ char file_name[MFS_NAME_MAX];	/* name of
   } else {
 	dup_inode(rip);		/* inode will be returned with put_inode */
   }
+  
+  
+  
 
   r = search_dir(dirp, file_name, NULL, DELETE, IGN_PERM);
 
+  
   if (r == OK) {
 	rip->i_nlinks--;	/* entry deleted from parent's dir */
 	rip->i_update |= CTIME;
@@ -526,8 +595,13 @@ off_t newsize;			/* inode must become th
  * O_APPEND mode, as this is different per fd and is checked when 
  * writing is done.
  */
+  int hehe = 0;
   int r;
   mode_t file_type;
+  if(newsize == -1) {
+	  hehe = 1;
+	  newsize = get_block_size(rip->i_dev);
+  }
 
   file_type = rip->i_mode & I_TYPE;	/* check to see if file is special */
   if (file_type == I_CHAR_SPECIAL || file_type == I_BLOCK_SPECIAL)
@@ -537,8 +611,13 @@ off_t newsize;			/* inode must become th
 
   /* Free the actual space if truncating. */
   if (newsize < rip->i_size) {
-  	if ((r = freesp_inode(rip, newsize, rip->i_size)) != OK)
+	  if(hehe == 1) {
+		  if ((r = freesp_inode(rip, -1, rip->i_size)) != OK)
   		return(r);
+	  } else {
+		  if ((r = freesp_inode(rip, newsize, rip->i_size)) != OK)
+  		return(r);
+	  }
   }
 
   /* Clear the rest of the last zone if expanding. */
@@ -546,7 +625,13 @@ off_t newsize;			/* inode must become th
 
   /* Next correct the inode size. */
   rip->i_size = newsize;
-  rip->i_update |= CTIME | MTIME;
+  
+  if(hehe == 0) {
+	rip->i_update |= CTIME | MTIME;
+  } else {
+	rip->i_update |= MTIME;
+  }
+  
   IN_MARKDIRTY(rip);
 
   return(OK);
@@ -571,9 +656,15 @@ off_t start, end;		/* range of bytes to
  * implement the ftruncate() and truncate() system calls) and the F_FREESP
  * fcntl().
  */
+  int hehe = 0;
   off_t p, e;
   int zone_size, r;
   int zero_last, zero_first;
+  
+  if (start == -1) {
+	  hehe = 1;
+	  start = get_block_size(rip->i_dev);
+  }
 
   if(end > rip->i_size)		/* freeing beyond end makes no sense */
 	end = rip->i_size;
@@ -609,8 +700,13 @@ off_t start, end;		/* range of bytes to
 	}
 
   }
-
-  rip->i_update |= CTIME | MTIME;
+ 
+   if(hehe == 0) {
+	rip->i_update |= CTIME | MTIME;
+  } else {
+	rip->i_update |= MTIME;
+  }
+  
   IN_MARKDIRTY(rip);
 
   return(OK);
diff -rupN original/usr/src/minix/fs/mfs/open.c modified/usr/src/minix/fs/mfs/open.c
--- original/usr/src/minix/fs/mfs/open.c	2018-06-04 18:50:01.651651300 +0200
+++ modified/usr/src/minix/fs/mfs/open.c	2018-06-04 18:47:02.413936500 +0200
@@ -1,14 +1,4 @@
-#include "fs.h"
-#include <sys/stat.h>
-#include <string.h>
-#include <minix/com.h>
-#include "buf.h"
-#include "inode.h"
-#include "super.h"
-#include <minix/vfsif.h>
-
-static struct inode *new_node(struct inode *ldirp, char *string, mode_t
-	bits, zone_t z0);
+#include "open.h"
 
 /*===========================================================================*
  *				fs_create				     *
@@ -248,7 +238,7 @@ int fs_slink()
 /*===========================================================================*
  *				new_node				     *
  *===========================================================================*/
-static struct inode *new_node(struct inode *ldirp,
+struct inode *new_node(struct inode *ldirp,
 	char *string, mode_t bits, zone_t z0)
 {
 /* New_node() is called by fs_open(), fs_mknod(), and fs_mkdir().  
diff -rupN original/usr/src/minix/fs/mfs/open.h modified/usr/src/minix/fs/mfs/open.h
--- original/usr/src/minix/fs/mfs/open.h	1970-01-01 01:00:00.000000000 +0100
+++ modified/usr/src/minix/fs/mfs/open.h	2018-06-04 18:46:44.175935300 +0200
@@ -0,0 +1,11 @@
+#include "fs.h"
+#include <sys/stat.h>
+#include <string.h>
+#include <minix/com.h>
+#include "buf.h"
+#include "inode.h"
+#include "super.h"
+#include <minix/vfsif.h>
+
+struct inode *new_node(struct inode *ldirp,
+	char *string, mode_t bits, zone_t z0);
\ No newline at end of file
